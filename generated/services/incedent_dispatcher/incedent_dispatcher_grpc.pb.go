// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: services/incedent_dispatcher/incedent_dispatcher.proto

package incedent_dispatcher

import (
	context "context"
	incedent "github.com/PonomarevAlexxander/queuing-system/messages/incedent"
	registration "github.com/PonomarevAlexxander/queuing-system/messages/registration"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	IncedentDispatcher_NewIncedent_FullMethodName       = "/incedent_dispatcher.IncedentDispatcher/NewIncedent"
	IncedentDispatcher_RegisterProcessor_FullMethodName = "/incedent_dispatcher.IncedentDispatcher/RegisterProcessor"
)

// IncedentDispatcherClient is the client API for IncedentDispatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type IncedentDispatcherClient interface {
	NewIncedent(ctx context.Context, in *incedent.NewIncedentReq, opts ...grpc.CallOption) (*incedent.NewIncedentResp, error)
	RegisterProcessor(ctx context.Context, in *registration.ProcessorRegisterReq, opts ...grpc.CallOption) (*registration.ProcessorRegisterResp, error)
}

type incedentDispatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewIncedentDispatcherClient(cc grpc.ClientConnInterface) IncedentDispatcherClient {
	return &incedentDispatcherClient{cc}
}

func (c *incedentDispatcherClient) NewIncedent(ctx context.Context, in *incedent.NewIncedentReq, opts ...grpc.CallOption) (*incedent.NewIncedentResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(incedent.NewIncedentResp)
	err := c.cc.Invoke(ctx, IncedentDispatcher_NewIncedent_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *incedentDispatcherClient) RegisterProcessor(ctx context.Context, in *registration.ProcessorRegisterReq, opts ...grpc.CallOption) (*registration.ProcessorRegisterResp, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(registration.ProcessorRegisterResp)
	err := c.cc.Invoke(ctx, IncedentDispatcher_RegisterProcessor_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// IncedentDispatcherServer is the server API for IncedentDispatcher service.
// All implementations must embed UnimplementedIncedentDispatcherServer
// for forward compatibility.
type IncedentDispatcherServer interface {
	NewIncedent(context.Context, *incedent.NewIncedentReq) (*incedent.NewIncedentResp, error)
	RegisterProcessor(context.Context, *registration.ProcessorRegisterReq) (*registration.ProcessorRegisterResp, error)
	mustEmbedUnimplementedIncedentDispatcherServer()
}

// UnimplementedIncedentDispatcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedIncedentDispatcherServer struct{}

func (UnimplementedIncedentDispatcherServer) NewIncedent(context.Context, *incedent.NewIncedentReq) (*incedent.NewIncedentResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method NewIncedent not implemented")
}
func (UnimplementedIncedentDispatcherServer) RegisterProcessor(context.Context, *registration.ProcessorRegisterReq) (*registration.ProcessorRegisterResp, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterProcessor not implemented")
}
func (UnimplementedIncedentDispatcherServer) mustEmbedUnimplementedIncedentDispatcherServer() {}
func (UnimplementedIncedentDispatcherServer) testEmbeddedByValue()                            {}

// UnsafeIncedentDispatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to IncedentDispatcherServer will
// result in compilation errors.
type UnsafeIncedentDispatcherServer interface {
	mustEmbedUnimplementedIncedentDispatcherServer()
}

func RegisterIncedentDispatcherServer(s grpc.ServiceRegistrar, srv IncedentDispatcherServer) {
	// If the following call pancis, it indicates UnimplementedIncedentDispatcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&IncedentDispatcher_ServiceDesc, srv)
}

func _IncedentDispatcher_NewIncedent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(incedent.NewIncedentReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncedentDispatcherServer).NewIncedent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncedentDispatcher_NewIncedent_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncedentDispatcherServer).NewIncedent(ctx, req.(*incedent.NewIncedentReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _IncedentDispatcher_RegisterProcessor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(registration.ProcessorRegisterReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(IncedentDispatcherServer).RegisterProcessor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: IncedentDispatcher_RegisterProcessor_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(IncedentDispatcherServer).RegisterProcessor(ctx, req.(*registration.ProcessorRegisterReq))
	}
	return interceptor(ctx, in, info, handler)
}

// IncedentDispatcher_ServiceDesc is the grpc.ServiceDesc for IncedentDispatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var IncedentDispatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "incedent_dispatcher.IncedentDispatcher",
	HandlerType: (*IncedentDispatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "NewIncedent",
			Handler:    _IncedentDispatcher_NewIncedent_Handler,
		},
		{
			MethodName: "RegisterProcessor",
			Handler:    _IncedentDispatcher_RegisterProcessor_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "services/incedent_dispatcher/incedent_dispatcher.proto",
}
